fn load_file_as_map(file_path) {
    let content = read_string(open_file(file_path));
    if content.len() == 0 {
        throw `Config file '${file_path}' is empty or unreadable`;
    }

    return parse_json(content);
}

fn load_configs(file_path) {
    let data = load_file_as_map(file_path);
    if "configs" in data {
        return data["configs"];
    } else {
        throw `No 'configs' section found in ${file_path}`;
    }
}

fn load_constants(file_path) {
    let data = load_file_as_map(file_path);
    if "constants" in data {
        return data["constants"];
    } else {
        throw `No 'constants' section found in ${file_path}`;
    }
}

// =================== Config Access ===================

fn get_config(key) {
    let configs = load_configs("skill.config");
    if key in configs {
        return configs[key]["value"];
    } else {
        throw `Configuration key '${key}' not found`;
    }
}

fn set_config(key, value) {
    let configs = load_configs("skill.config");

    if key in configs {
        let config_type = configs[key]["type"];
        let value_type = type_of_value(value);

        if !is_compatible_type(value, config_type) {
            throw `Type mismatch: Expected ${config_type} but got ${value_type} for key '${key}'`;
        }

        configs[key]["value"] = value;
    } else {
        configs[key] = #{
            "value": value,
                "default": value,
                "type": type_of_value(value),
                "label": key,
                "description": ""
        };
    }

    return configs; // caller must save this if they want to persist it
}

fn has_config(key) {
    let configs = load_configs("skill.config");
    return key in configs;
}

fn reset_config(key) {
    let configs = load_configs("skill.config");
    if key in configs {
        configs[key]["value"] = configs[key]["default"];
        return configs;
    } else {
        throw `Configuration key '${key}' not found`;
    }
}

fn type_of_config(key) {
    let configs = load_configs("skill.config");
    if key in configs {
        return configs[key]["type"];
    } else {
        throw `Configuration key '${key}' not found`;
    }
}

fn get_all_config_keys() {
    return load_configs("skill.config").keys();
}

// =================== Constants ===================

fn get_const(key) {
    let constants = load_constants("skill.config");
    if key in constants {
        return constants[key];
    } else {
        throw `Constant '${key}' not found`;
    }
}

fn has_const(key) {
    let constants = load_constants("skill.config");
    return key in constants;
}

fn get_all_const_keys() {
    return load_constants("skill.config").keys();
}

// =================== Helpers ===================

fn type_of_value(value) {
    let type_name = type_of(value);

    if type_name == "i64" || type_name == "decimal" {
        return "int";
    } else if type_name == "f64" {
        return "float";
    } else if type_name == "string" {
        return "string";
    } else if type_name == "bool" {
        return "bool";
    } else if type_name == "array" {
        return "list";
    } else if type_name == "map" {
        return "map";
    } else {
        return type_name;
    }
}

fn is_compatible_type(value, expected_type) {
    let actual_type = type_of_value(value);

    if actual_type == expected_type {
        return true;
    }

    if expected_type == "float" && actual_type == "int" {
        return true;
    }

    return false;
}