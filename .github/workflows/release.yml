name: Rust Release

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - '**.md'
      - '**.yml'
      - 'book/**'
      - '.github/**'
  workflow_dispatch:  
    inputs:
      version:
        description: 'Release Version'
        required: false

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release (Multi-platform)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release --verbose

      - name: Run Clippy
        run: cargo clippy --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Avi-core-${{ runner.os }}
          path: target/release/Avi-core-${{ runner.os }}

  release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 0

      - name: Get last tag
        id: get_tag
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

      - name: Generate Release Note
        id: generate-release-note
        uses: combinatrix-ai/release-note-writer@v1
        continue-on-error: true
        with:
          compare_to: specified
          tag: ${{ env.LAST_TAG }}
          api_key: ${{ secrets.GOOGLE_CLOUD_API_KEY }}

      - name: Set release note
        run: |
          echo "RELEASE_NOTE=${{ steps.generate-release-note.outputs.release_note || 'No release notes available.' }}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          pattern: Avi-core-*
          merge-multiple: true
          path: artifacts

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(cargo pkgid | sed -E 's/.*#(.*)/\1/')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTE }}
          artifacts: artifacts/**